/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ParsersRouteImport } from './routes/parsers'
import { Route as MqttRouteImport } from './routes/mqtt'
import { Route as DevicesRouteImport } from './routes/devices'
import { Route as ConfigRouteImport } from './routes/config'
import { Route as IndexRouteImport } from './routes/index'

const ParsersRoute = ParsersRouteImport.update({
  id: '/parsers',
  path: '/parsers',
  getParentRoute: () => rootRouteImport,
} as any)
const MqttRoute = MqttRouteImport.update({
  id: '/mqtt',
  path: '/mqtt',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesRoute = DevicesRouteImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => rootRouteImport,
} as any)
const ConfigRoute = ConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/devices': typeof DevicesRoute
  '/mqtt': typeof MqttRoute
  '/parsers': typeof ParsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/devices': typeof DevicesRoute
  '/mqtt': typeof MqttRoute
  '/parsers': typeof ParsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/devices': typeof DevicesRoute
  '/mqtt': typeof MqttRoute
  '/parsers': typeof ParsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/config' | '/devices' | '/mqtt' | '/parsers'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/config' | '/devices' | '/mqtt' | '/parsers'
  id: '__root__' | '/' | '/config' | '/devices' | '/mqtt' | '/parsers'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConfigRoute: typeof ConfigRoute
  DevicesRoute: typeof DevicesRoute
  MqttRoute: typeof MqttRoute
  ParsersRoute: typeof ParsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/parsers': {
      id: '/parsers'
      path: '/parsers'
      fullPath: '/parsers'
      preLoaderRoute: typeof ParsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mqtt': {
      id: '/mqtt'
      path: '/mqtt'
      fullPath: '/mqtt'
      preLoaderRoute: typeof MqttRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices': {
      id: '/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/config': {
      id: '/config'
      path: '/config'
      fullPath: '/config'
      preLoaderRoute: typeof ConfigRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConfigRoute: ConfigRoute,
  DevicesRoute: DevicesRoute,
  MqttRoute: MqttRoute,
  ParsersRoute: ParsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
